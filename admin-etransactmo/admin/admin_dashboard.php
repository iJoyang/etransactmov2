<?php
// Database Connection
include('../config.php');

//include ang autoload gikan sa composer
require_once 'vendor/autoload.php';

use Endroid\QrCode\QrCode;
use Endroid\QrCode\Writer\PngWriter;

define('ENCRYPTION_KEY', 'JoyGwapa123'); //encryption key
define('ENCRYPTION_METHOD', 'AES-256-CBC');

// Encrypt the content for the QR code
function encryptContent($content)
{
    $key = hash('sha256', ENCRYPTION_KEY);
    $iv = substr(hash('sha256', 'unique_initialization_vector'), 0, 16);
    return openssl_encrypt($content, ENCRYPTION_METHOD, $key, 0, $iv) . ':' . base64_encode($iv);
}

// Function to fetch the province name by its code
function getProvinceName($provinceCode)
{
    $url = "https://psgc.gitlab.io/api/provinces/{$provinceCode}/";
    $response = file_get_contents($url);
    $data = json_decode($response, true);
    return $data['name'] ?? null; // Return the name or null if not found
}

// Function to fetch the city name by its code
function getCityName($cityCode)
{
    $url = "https://psgc.gitlab.io/api/cities-municipalities/{$cityCode}/";
    $response = file_get_contents($url);
    $data = json_decode($response, true);
    return $data['name'] ?? null; // Return the name or null if not found
}

// Function to fetch the city name by its code
function getBarangayName($barangayCode)
{
    $url = "https://psgc.gitlab.io/api/barangays/{$barangayCode}/";
    $response = file_get_contents($url);
    $data = json_decode($response, true);
    return $data['name'] ?? null; // Return the name or null if not found
}

// Check if the form is submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // User inputs
    $lastname = strtoupper($_POST['lastname']);
    $firstname = strtoupper($_POST['firstname']);
    $middle_initial = isset($_POST['middle_initial']) ? trim($_POST['middle_initial']) : '';
    if (strcasecmp($middle_initial, "N/A") === 0) {
        $middle_initial = '';
    }
    $middle_initial = strtoupper($middle_initial);
    $suffix = strtoupper($_POST['suffix']);
    $age = $_POST['age'];
    $gender = strtoupper($_POST['gender']);
    $contact_number = $_POST['contact_number'];
    $provinceCode = !empty($_POST['province']) ? strtoupper(trim($_POST['province'])) : null;
    $cityCode = !empty($_POST['city']) ? strtoupper(trim($_POST['city'])) : null;
    $barangayCode = !empty($_POST['barangay']) ? strtoupper(trim($_POST['barangay'])) : null;
    $district = !empty($_POST['district']) ? 'DISTRICT ' . strtoupper($_POST['district']) : null;
    $purok = !empty($_POST['purok']) ? strtoupper($_POST['purok']) : null;


    // Fetch the province and city names based on the codes
    $provinceName = $provinceCode ? strtoupper(getProvinceName($provinceCode)) : null;
    $cityName = $cityCode ? strtoupper(getCityName($cityCode)) : null;
    $barangayName = $barangayCode ? strtoupper(getBarangayName($barangayCode)) : null;

    // Concatenate inputs for full name and address
    $full_name = "$lastname, $firstname $middle_initial $suffix";
    $address = "$purok, $district, $barangayName, $cityName, $provinceName";

    // Insert data into the database to get the unique ID
    $stmt = $conn->prepare("INSERT INTO residents (full_name, age, gender, contact_number, address) VALUES (?, ?, ?, ?, ?)");
    $stmt->bind_param("sisss", $full_name, $age, $gender, $contact_number, $address);
    $stmt->execute();

    // Get the unique ID generated by the database
    $user_id = $stmt->insert_id;  // This gives the unique ID of the newly inserted record

    // Concatenate the unique ID to the QR content
    $qr_content = "$user_id, $full_name, $age, $gender, $contact_number, $address";
    $encrypted_content = encryptContent($qr_content);

    // Generate and save QR
    $qr = new QrCode($encrypted_content);
    $writer = new PngWriter();
    $file_name = '../../qrcodes/' . uniqid() . '.png';
    $writer->write($qr)->saveToFile($file_name);

    // Update the database with the QR code filename
    $stmt_update = $conn->prepare("UPDATE residents SET qr_code = ? WHERE id = ?");
    $stmt_update->bind_param("si", $file_name, $user_id);
    $stmt_update->execute();
    $stmt_update->close();

    // Pass the data to the front end
    $qr_id_file = $file_name;
    $qr_details = [
        'fullname' => $full_name,
        'age' => $age,
        'gender' => $gender,
        'contact_number' => $contact_number,
        'address' => $address,
        'qr_code' => $qr_id_file,
        'user_id' => $user_id // Include the unique ID as part of the data
    ];

    // Close the original statement and connection
    $stmt->close();
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Administrator Dashboard</title>
    <link rel="stylesheet" href="../css/admin_dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script>
        // Debug information to help troubleshoot chart issues
        console.log('Loading dashboard scripts...');
        window.addEventListener('DOMContentLoaded', function() {
            console.log('DOM fully loaded');
            if (typeof Chart === 'undefined') {
                console.error('Chart.js not loaded properly');
            } else {
                console.log('Chart.js loaded successfully');
            }
        });
    </script>
    <script>
        // Inline script to fetch chart data
        document.addEventListener('DOMContentLoaded', function() {
            // Show loading spinner
            document.getElementById('loading-spinner').classList.remove('hidden');

            console.log('Fetching chart data...');

            // Fetch data for charts and dashboard stats
            fetch('fetch_chart_data.php')
                .then(response => {
                    console.log('Received response:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Parsed data:', data);

                    // Update dashboard stats
                    document.getElementById('totalRegistered').textContent = data.totalRegistered || 0;
                    document.getElementById('totalRequests').textContent = data.pendingRequests || 0;
                    document.getElementById('toValidate').textContent = data.toValidate || 0;

                    // Initialize charts
                    console.log('Initializing charts with data...');

                    // Custom chart colors - professional color palette
                    const colorPalette = {
                        primary: [
                            'rgba(25, 118, 210, 0.8)', // Blue
                            'rgba(236, 64, 122, 0.8)', // Pink
                            'rgba(46, 125, 50, 0.8)', // Green
                            'rgba(245, 124, 0, 0.8)', // Orange
                            'rgba(123, 31, 162, 0.8)', // Purple
                            'rgba(0, 131, 143, 0.8)', // Teal
                            'rgba(194, 24, 91, 0.8)' // Dark Pink
                        ],
                        pastel: [
                            'rgba(66, 165, 245, 0.7)', // Light Blue
                            'rgba(240, 98, 146, 0.7)', // Light Pink
                            'rgba(102, 187, 106, 0.7)', // Light Green
                            'rgba(255, 167, 38, 0.7)', // Light Orange
                            'rgba(171, 71, 188, 0.7)', // Light Purple
                            'rgba(38, 198, 218, 0.7)', // Light Teal
                            'rgba(236, 64, 122, 0.7)' // Light Pink 2
                        ],
                        borders: [
                            'rgba(25, 118, 210, 1)', // Blue
                            'rgba(236, 64, 122, 1)', // Pink
                            'rgba(46, 125, 50, 1)', // Green
                            'rgba(245, 124, 0, 1)', // Orange
                            'rgba(123, 31, 162, 1)', // Purple
                            'rgba(0, 131, 143, 1)', // Teal
                            'rgba(194, 24, 91, 1)' // Dark Pink
                        ]
                    };

                    // Common chart options
                    const commonOptions = {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1500,
                            easing: 'easeOutQuart'
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    font: {
                                        family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                        size: 12,
                                        weight: 'bold'
                                    },
                                    padding: 15
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleFont: {
                                    family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                    size: 14,
                                    weight: 'bold'
                                },
                                bodyFont: {
                                    family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                    size: 13
                                },
                                padding: 12,
                                cornerRadius: 6,
                                displayColors: true,
                                boxWidth: 10,
                                boxHeight: 10,
                                boxPadding: 3,
                                usePointStyle: true
                            }
                        }
                    };

                    // District Chart
                    const districtCtx = document.getElementById('districtChart').getContext('2d');
                    const districtData = data.districtDistribution || [];

                    // Default data if none available
                    if (districtData.length === 0) {
                        for (let i = 1; i <= 7; i++) {
                            districtData.push({
                                district: `District ${i}`,
                                count: 0
                            });
                        }
                    }

                    // Create monochromatic color scheme
                    const baseColor = 'rgba(66, 133, 244, 1)'; // Google Blue
                    const monoColors = [];

                    // Generate monochromatic colors with varying opacity
                    for (let i = 0; i < districtData.length; i++) {
                        const opacity = 0.4 + (0.6 * (i / districtData.length));
                        monoColors.push(`rgba(66, 133, 244, ${opacity})`);
                    }

                    new Chart(districtCtx, {
                        type: 'bar',
                        data: {
                            labels: districtData.map(item => item.district),
                            datasets: [{
                                label: 'Number of Residents',
                                data: districtData.map(item => item.count),
                                backgroundColor: monoColors,
                                borderColor: baseColor,
                                borderWidth: 1
                            }]
                        },
                        options: {
                            ...commonOptions,
                            indexAxis: 'y', // This makes the chart horizontal in Chart.js v3
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    grid: {
                                        color: 'rgba(200, 200, 200, 0.2)',
                                        drawBorder: false
                                    },
                                    ticks: {
                                        font: {
                                            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                            size: 12
                                        },
                                        padding: 10
                                    },
                                    title: {
                                        display: true,
                                        text: 'Number of Residents',
                                        font: {
                                            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                            size: 14,
                                            weight: 'bold'
                                        },
                                        padding: {
                                            top: 10,
                                            bottom: 10
                                        }
                                    }
                                },
                                y: {
                                    grid: {
                                        display: false,
                                        drawBorder: false
                                    },
                                    ticks: {
                                        font: {
                                            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                            size: 12
                                        },
                                        padding: 10
                                    }
                                }
                            },
                            plugins: {
                                ...commonOptions.plugins,
                                legend: {
                                    ...commonOptions.plugins.legend,
                                    display: false
                                }
                            }
                        }
                    });

                    // Age Chart
                    const ageCtx = document.getElementById('ageChart').getContext('2d');
                    const ageData = data.ageDistribution || [];

                    // Default data if none available
                    if (ageData.length === 0) {
                        ageData.push({
                            ageGroup: 'Children (0-12)',
                            count: 0
                        }, {
                            ageGroup: 'Teenagers (13-19)',
                            count: 0
                        }, {
                            ageGroup: 'Young Adults (20-35)',
                            count: 0
                        }, {
                            ageGroup: 'Adults (36-59)',
                            count: 0
                        }, {
                            ageGroup: 'Seniors (60+)',
                            count: 0
                        });
                    }

                    new Chart(ageCtx, {
                        type: 'doughnut',
                        data: {
                            labels: ageData.map(item => item.ageGroup),
                            datasets: [{
                                data: ageData.map(item => item.count),
                                backgroundColor: colorPalette.pastel.slice(0, ageData.length),
                                borderColor: colorPalette.borders.slice(0, ageData.length),
                                borderWidth: 2,
                                hoverBackgroundColor: colorPalette.primary.slice(0, ageData.length),
                                hoverBorderWidth: 3,
                                hoverOffset: 10
                            }]
                        },
                        options: {
                            ...commonOptions,
                            cutout: '65%',
                            plugins: {
                                ...commonOptions.plugins,
                                legend: {
                                    ...commonOptions.plugins.legend,
                                    position: 'right'
                                },
                                tooltip: {
                                    ...commonOptions.plugins.tooltip,
                                    callbacks: {
                                        label: function(context) {
                                            const label = context.label || '';
                                            const value = context.raw || 0;
                                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = Math.round((value / total) * 100);
                                            return `${label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });

                    // Monthly Transactions Chart
                    const barCtx = document.getElementById('barChart').getContext('2d');
                    const monthlyData = data.monthlyTransactions || [];

                    // Default data if none available
                    if (monthlyData.length === 0) {
                        const months = ['January', 'February', 'March', 'April', 'May', 'June',
                            'July', 'August', 'September', 'October', 'November', 'December'
                        ];
                        months.forEach(month => {
                            monthlyData.push({
                                month: month,
                                male: 0,
                                female: 0
                            });
                        });
                    }

                    new Chart(barCtx, {
                        type: 'bar',
                        data: {
                            labels: monthlyData.map(item => item.month),
                            datasets: [{
                                    label: 'Male',
                                    data: monthlyData.map(item => item.male),
                                    backgroundColor: colorPalette.pastel[0],
                                    borderColor: colorPalette.borders[0],
                                    borderWidth: 2,
                                    borderRadius: 6,
                                    hoverBackgroundColor: colorPalette.primary[0],
                                    hoverBorderWidth: 3
                                },
                                {
                                    label: 'Female',
                                    data: monthlyData.map(item => item.female),
                                    backgroundColor: colorPalette.pastel[1],
                                    borderColor: colorPalette.borders[1],
                                    borderWidth: 2,
                                    borderRadius: 6,
                                    hoverBackgroundColor: colorPalette.primary[1],
                                    hoverBorderWidth: 3
                                }
                            ]
                        },
                        options: {
                            ...commonOptions,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    grid: {
                                        color: 'rgba(200, 200, 200, 0.2)',
                                        drawBorder: false
                                    },
                                    ticks: {
                                        font: {
                                            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                            size: 12
                                        },
                                        padding: 10
                                    },
                                    title: {
                                        display: true,
                                        text: 'Number of Transactions',
                                        font: {
                                            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                            size: 14,
                                            weight: 'bold'
                                        },
                                        padding: {
                                            top: 10,
                                            bottom: 10
                                        }
                                    }
                                },
                                x: {
                                    grid: {
                                        display: false,
                                        drawBorder: false
                                    },
                                    ticks: {
                                        font: {
                                            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                            size: 12
                                        },
                                        padding: 10,
                                        maxRotation: 45,
                                        minRotation: 45
                                    }
                                }
                            },
                            plugins: {
                                ...commonOptions.plugins,
                                legend: {
                                    ...commonOptions.plugins.legend,
                                    position: 'top'
                                }
                            }
                        }
                    });

                    // Fetch transaction status data
                    console.log('About to fetch transaction status data...');
                    fetch('fetch_transaction_status_data.php')
                        .then(response => {
                            console.log('Transaction status response received:', response.status);
                            return response.json();
                        })
                        .then(statusData => {
                            console.log('Transaction status data parsed:', statusData);

                            // Transaction Status Chart
                            const statusCtx = document.getElementById('statusChart');
                            if (!statusCtx) {
                                console.error('Status chart canvas element not found!');
                                return;
                            }
                            console.log('Status chart canvas found:', statusCtx);

                            // Destroy any existing chart
                            const existingChart = Chart.getChart(statusCtx);
                            if (existingChart) {
                                console.log('Destroying existing chart');
                                existingChart.destroy();
                            }

                            // Prepare data for chart
                            const statusChartData = [{
                                    status: 'Pending',
                                    count: statusData.pending || 0,
                                    percent: statusData.pending_percent || 0
                                },
                                {
                                    status: 'Approved',
                                    count: statusData.approved || 0,
                                    percent: statusData.approved_percent || 0
                                },
                                {
                                    status: 'Rejected',
                                    count: statusData.rejected || 0,
                                    percent: statusData.rejected_percent || 0
                                }
                            ];

                            // Status chart colors
                            const statusColors = {
                                backgroundColor: ['#f6c23e', '#1cc88a', '#e74a3b'],
                                borderColor: ['#dda20a', '#13a673', '#be2617'],
                                hoverBackgroundColor: ['#f4b619', '#17a673', '#e02d1b']
                            };

                            try {
                                console.log('Creating new transaction status chart');
                                const statusChart = new Chart(statusCtx, {
                                    type: 'doughnut',
                                    data: {
                                        labels: statusChartData.map(item => `${item.status} (${item.percent}%)`),
                                        datasets: [{
                                            data: statusChartData.map(item => item.count),
                                            backgroundColor: statusColors.backgroundColor,
                                            borderColor: statusColors.borderColor,
                                            borderWidth: 2,
                                            hoverBackgroundColor: statusColors.hoverBackgroundColor,
                                            hoverBorderWidth: 3,
                                            hoverOffset: 10
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        plugins: {
                                            legend: {
                                                position: 'bottom',
                                                labels: {
                                                    padding: 20,
                                                    usePointStyle: true,
                                                    pointStyle: 'circle'
                                                }
                                            },
                                            tooltip: {
                                                callbacks: {
                                                    label: function(context) {
                                                        const label = context.label || '';
                                                        const value = context.raw || 0;
                                                        return `${label}: ${value} transactions`;
                                                    }
                                                }
                                            }
                                        },
                                        cutout: '65%'
                                    }
                                });
                                console.log('Transaction status chart created successfully:', statusChart);
                            } catch (chartError) {
                                console.error('Error creating transaction status chart:', chartError);
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching transaction status data:', error);

                            // Create empty chart if data fetch fails
                            const statusCtx = document.getElementById('statusChart').getContext('2d');
                            new Chart(statusCtx, {
                                type: 'doughnut',
                                data: {
                                    labels: ['Pending', 'Approved', 'Rejected'],
                                    datasets: [{
                                        data: [0, 0, 0],
                                        backgroundColor: ['#f6c23e', '#1cc88a', '#e74a3b'],
                                        borderColor: ['#dda20a', '#13a673', '#be2617'],
                                        borderWidth: 2
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    plugins: {
                                        legend: {
                                            position: 'bottom'
                                        }
                                    },
                                    cutout: '65%'
                                }
                            });
                        });

                    // Hide loading spinner
                    document.getElementById('loading-spinner').classList.add('hidden');
                    console.log('Charts initialized successfully');
                })
                .catch(error => {
                    console.error('Error fetching chart data:', error);
                    document.getElementById('loading-spinner').classList.add('hidden');
                });
        });
    </script>
    <script>
        // Additional script to handle menu functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Menu functionality
            const menuItems = document.querySelectorAll('.menu li, #logout-menu');
            const contentSections = document.querySelectorAll('.content-section');

            menuItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Remove active class from all menu items
                    document.querySelectorAll('.menu li').forEach(mi => mi.classList.remove('active'));

                    // Hide all content sections
                    contentSections.forEach(section => section.classList.remove('active'));

                    // Determine which content to show based on clicked item
                    let contentId;

                    if (this.id === 'home-menu') {
                        this.classList.add('active');
                        contentId = 'home-content';
                    } else if (this.id === 'transactions-menu') {
                        this.classList.add('active');
                        contentId = 'transactions-content';
                    } else if (this.id === 'users-menu') {
                        this.classList.add('active');
                        contentId = 'users-content';
                    } else if (this.id === 'qrcode-menu') {
                        this.classList.add('active');
                        contentId = 'qrcode-content';
                    } else if (this.id === 'logout-menu') {
                        // Logout functionality
                        location.href = 'logout_admin.php';
                    }

                    // Show the corresponding content
                    if (contentId) {
                        document.getElementById(contentId).classList.add('active');
                    }
                });
            });

            // Function to show QR modal
            window.showModal = function(button) {
                const modal = document.getElementById('qrModal');

                // Set modal content from data attributes
                document.getElementById('modalFullName').textContent = button.getAttribute('data-fullname');
                document.getElementById('modalAge').textContent = button.getAttribute('data-age');
                document.getElementById('modalGender').textContent = button.getAttribute('data-gender');
                document.getElementById('modalContact').textContent = button.getAttribute('data-contact');
                document.getElementById('modalAddress').textContent = button.getAttribute('data-address');

                // Set QR image source
                document.getElementById('qrImg').src = button.getAttribute('data-qr');

                // Show modal
                modal.style.display = 'flex';
            };

            // Function to close QR modal
            window.closeModal = function(event) {
                if (event.target.classList.contains('modal')) {
                    document.getElementById('qrModal').style.display = 'none';
                }
            };

            // Function to download QR ID
            window.downloadQRID = function() {
                const modalContainer = document.querySelector('#qrModal .modal-container');

                html2canvas(modalContainer).then(canvas => {
                    const link = document.createElement('a');
                    link.download = 'QR_ID_' + document.getElementById('modalFullName').textContent.replace(/\s+/g, '_') + '.png';
                    link.href = canvas.toDataURL('image/png');
                    link.click();
                });
            };

            // Function to download QR from registration
            window.downloadQR = function() {
                const modalContainer = document.querySelector('#qrModalFromRegister .modal-container');

                html2canvas(modalContainer).then(canvas => {
                    const link = document.createElement('a');
                    link.download = 'QR_ID.png';
                    link.href = canvas.toDataURL('image/png');
                    link.click();
                });
            };

            // Function to confirm deletion of a resident
            window.confirmDelete = function(button) {
                const residentId = button.getAttribute('data-id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send delete request
                        fetch('delete_resident.php', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: 'id=' + residentId
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire(
                                        'Deleted!',
                                        'The resident has been deleted.',
                                        'success'
                                    ).then(() => {
                                        // Reload the page to refresh the table
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        data.message || 'Failed to delete resident.',
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire(
                                    'Error!',
                                    'An unexpected error occurred.',
                                    'error'
                                );
                            });
                    }
                });
            };
        });
    </script>
    <script src="../JS/user-register.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<?php
$middle_initial = isset($_POST['middle_initial']) ? trim($_POST['middle_initial']) : '';
if (strcasecmp($middle_initial, "N/A") === 0) {
    $middle_initial = '';
}
?>


<body data-modal-status="<?php echo isset($qr_details) ? 'show' : 'hide'; ?>">
    <div id="loadingMessage">
        <img id="loadingLogo" src="../PIC/logo.png" alt="Loading">
    </div>

    <nav class="menu" tabindex="0">
        <header class="logo" id="logo-menu">
            <img id="logo-menu" src="../PIC/logo.png" />
            <h2>ETRANSACTMO</h2>
            <p>Barangay Zone III, Digos City, Davao del Sur</p>
        </header>
        <ul>
            <li tabindex="0" class="icon-home active" id="home-menu"><span>HOME</span></li>
            <li tabindex="0" class="icon-transactions" id="transactions-menu"><span>REQUEST</span></li>
            <li tabindex="0" class="icon-users" id="users-menu"><span>RESIDENT</span></li>
            <li tabindex="0" class="icon-qrcode" id="qrcode-menu"><span>GENERATE QR CODE</span></li>
        </ul>
        <div class="sidebar-footer">
            <div id="logout-menu" onclick="location.href='logout_admin.php'">
                <i class="fa-solid fa-sign-out-alt"></i>
                <span>Logout</span>
            </div>
        </div>
    </nav>

    <!-- Modal to display the QR code and details -->
    <div id="qrModalFromRegister" class="modal">

        <div class="modal-container">
            <div class="modal-title">
                <img src="../PIC/logo.png" alt="logo">
                <h4>ETRANSACTMO QR ID</h4>
            </div>
            <div class="modal-content">
                <div class="details">
                    <p><strong>Full Name:</strong> <?php echo $qr_details['fullname']; ?></p>
                    <p><strong>Age:</strong> <?php echo $qr_details['age']; ?></p>
                    <p><strong>Gender:</strong> <?php echo $qr_details['gender']; ?></p>
                    <p><strong>Contact Number:</strong> <?php echo $qr_details['contact_number']; ?></p>
                    <p><strong>Address:</strong> <?php echo $qr_details['address']; ?></p>
                </div>
                <div class="qr-code">
                    <img id="qrImage" src="<?php echo $qr_details['qr_code']; ?>" alt="QR Code">
                </div>
            </div>

        </div>
        <div class="modal-buttons">
            <button onclick="window.print()" class="btn">Print QR ID</button>
            <button onclick="downloadQR()" class="btn">Download QR ID</button>
        </div>
    </div>

    <main class="main-content">

        <div id="usersettings-content" class="user-settings content-section">
            <h2>User Settings</h2>
            <a href="logout_admin.php">Logout</a>
            <p>This is where you can modify user profile.</p>
        </div>

        <div id="generalsettings-content" class="general-settings content-section">
            <h2>General Settings</h2>
            <p>This is where you can change settings.</p>
        </div>



        <div id="qrcode-content" class="qrcode content-section">
            <!-- Logo -->
            <div class="logo-container">
                <div class="logo">
                    <button class="logo-button" onclick="redirectToHome()">
                        <img class="logo-size" src="../PIC/logo.png" alt="Logo" />
                    </button>
                </div>
                <div class="title-text">
                    <h2>ETRANSACTMO USER REGISTRATION</h2>
                </div>
            </div>

            <div class="register-form-container">
                <!-- <button onclick="redirectToLogin()" class="btn back-btn">
            <span class="text"><i class="fas fa-arrow-left"></i>Go back to Login</span>
            </button> -->
                <form class="register-form" action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
                    <p>Please fill-in the necessary information to generate your QR Code</p>

                    <div class="input-fields">
                        <!-- Last Name Field -->
                        <div class="input-group">
                            <label class="custom-field">
                                <input type="text" name="lastname" placeholder="&nbsp;" required autocomplete="off" />
                                <span class="placeholder">Enter Lastname</span>
                            </label>
                        </div>
                        <!-- First Name Field -->
                        <div class="input-group">
                            <label class="custom-field">
                                <input type="text" name="firstname" placeholder="&nbsp;" required autocomplete="off" />
                                <span class="placeholder">Enter Firstname</span>
                            </label>
                        </div>
                        <!-- Middle Initial Field -->
                        <div class="input-group">
                            <label class="custom-field">
                                <input type="text" name="middle_initial" placeholder="&nbsp;" autocomplete="off" value="N/A" />
                                <span class="placeholder">Enter Middle Initial</span>
                            </label>
                        </div>
                        <!-- Suffix Field -->
                        <div class="input-group">
                            <label class="custom-field">
                                <select name="suffix">
                                    <option value="" selected>N/A</option>
                                    <option value="Jr.">Jr.</option>
                                    <option value="Sr.">Sr.</option>
                                    <option value="II">II</option>
                                    <option value="III">III</option>
                                    <option value="IV">IV</option>
                                </select>
                                <span class="placeholder">Suffix</span>
                            </label>
                        </div>
                    </div>

                    <div class="input-fields">
                        <!-- Age Field -->
                        <div class="input-group">
                            <label class="custom-field">
                                <input type="number" name="age" placeholder="&nbsp;" min="1" max="120" autocomplete="off" required />
                                <span class="placeholder">Enter Age</span>
                            </label>
                        </div>

                        <!-- Gender Field (Radio buttons instead of checkboxes) -->
                        <h4>Gender: </h4>
                        <label>
                            <input type="radio" name="gender" value="MALE" required>
                            Male
                        </label>
                        <label>
                            <input type="radio" name="gender" value="FEMALE" required>
                            Female
                        </label>
                        <label>
                            <input type="radio" name="gender" value="PREFER NOT TO SAY" required>
                            Prefer not to say
                        </label>

                        <!-- Contact Number Field -->
                        <div class="input-group">
                            <label class="custom-field">
                                <input type="text" name="contact_number" id="contact_number"
                                    required autocomplete="off"
                                    value="+63"
                                    maxlength="13"
                                    oninput="validateContactNumber()"
                                    onfocus="this.setSelectionRange(3, 3)" />
                                <span class="placeholder">Enter Contact Number</span>
                            </label>
                        </div>
                    </div>

                    <div class="input-fields">
                        <!-- Address Field -->
                        <div class="input-group region-select">
                            <label class="custom-field">
                                <select id="region" name="region" onchange="loadProvinces(this.value)" required>
                                    <option value="">&nbsp;</option>
                                </select>
                                <span class="placeholder">Region</span>
                            </label>
                        </div>
                        <div class="input-group">
                            <label class="custom-field">
                                <select id="province" name="province" onchange="loadCities(this.value)" required>
                                    <option value="">&nbsp;</option>
                                </select>
                                <span class="placeholder-fixed">Province</span>
                            </label>
                        </div>
                        <div class="input-group">
                            <label class="custom-field">
                                <select id="city" name="city" onchange="loadBarangays(this.value)" required>
                                    <option value="">&nbsp;</option>
                                </select>
                                <span class="placeholder-fixed">City/Municipality</span>
                            </label>
                        </div>
                        <div class="input-group">
                            <label class="custom-field">
                                <select id="barangay" name="barangay" required>
                                    <option value="">&nbsp;</option>
                                </select>
                                <span class="placeholder-fixed">Barangay</span>
                            </label>
                        </div>
                        <div class="input-group">
                            <label class="custom-field">
                                <select id="district" name="district" required onchange="updatePurokOptions()">
                                    <option value="">&nbsp;</option>
                                    <option value="1">District 1</option>
                                    <option value="2">District 2</option>
                                    <option value="3">District 3</option>
                                    <option value="4">District 4</option>
                                    <option value="5">District 5</option>
                                    <option value="6">District 6</option>
                                    <option value="7">District 7</option>
                                </select>
                                <span class="placeholder-fixed">District</span>
                            </label>
                        </div>
                        <div class="input-group">
                            <label class="custom-field">
                                <select id="purok" name="purok" required>
                                    <option value="">&nbsp;</option>
                                </select>
                                <span class="placeholder-fixed">Purok</span>
                            </label>
                        </div>
                    </div>
                    <!-- Submit Button -->
                    <button type="submit" class="btn login-btn" onclick="return validateForm()">
                        <span class="text">Generate QR Code</span>
                    </button>
                </form>
            </div>
            <div id="loadingMessage">
                <img id="loadingLogo" src="../PIC/logo.png" alt="Loading">
            </div>
        </div>


        <div id="home-content" class="home content-section active">
            <div class="top-boxes">
                <div class="box" id="total-registered">
                    <h3>Total Registered Residents</h3>
                    <p id="totalRegistered">0</p>
                </div>
                <div class="box" id="pending-requests">
                    <h3>Pending Requests</h3>
                    <p id="totalRequests">0</p>
                </div>
                <div class="box" id="to-validate">
                    <h3>To Validate</h3>
                    <p id="toValidate">0</p>
                </div>
            </div>
            <div class="charts-container">
                <div class="chart-box">
                    <h3>Monthly Transaction of Men and Women</h3>
                    <canvas id="barChart"></canvas>
                </div>
                <div class="chart-box">
                    <h3>Resident Distribution by District</h3>
                    <canvas id="districtChart"></canvas>
                </div>
            </div>
            <div class="charts-container">
                <div class="chart-box">
                    <h3>Transaction Status Distribution</h3>
                    <canvas id="statusChart" width="400" height="400"></canvas>
                </div>
                <div class="chart-box">
                    <h3>Resident Distribution by Age Group</h3>
                    <canvas id="ageChart"></canvas>
                </div>
            </div>
            <div id="loading-spinner" class="hidden">
                <div class="spinner"></div>
            </div>
        </div>

        <div id="transactions-content" class="transactions content-section">
            <h2>Manage Transactions</h2>
            <div class="table-container">
                <table id="approved-transactions-table">
                    <thead>
                        <tr>
                            <th>Request ID</th>
                            <th>Client Name</th>
                            <th>Transaction Name</th>
                            <th>Type</th>
                            <th>Details</th>
                            <th>Time Requested</th>
                            <th>Date Requested</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>

        <div id="users-content" class="users content-section">
            <h2>View Residents</h2>
            <div class="dropdown-container">
                <label for="district-dropdown">District:</label>
                <select id="district-dropdown">
                    <option value="">-- Select District --</option>
                </select>
                <label for="purok-dropdown">Purok:</label>
                <select id="purok-dropdown" disabled>
                    <option value="">-- Select Purok --</option>
                </select>
            </div>
            <div class="table-container">
                <table id="users-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Full Name</th>
                            <th>Age</th>
                            <th>Gender</th>
                            <th>Contact Number</th>
                            <th>Address</th>
                            <th>Action</th>
                        </tr>
                        <td colspan="7">Please select a district and purok to view data.</td>
                    </thead>
                    <tbody>
                        <?php
                        $result = $conn->query("SELECT id, full_name, age, gender, contact_number, address, qr_code FROM residents");


                        if ($result->num_rows > 0) {
                            while ($row = $result->fetch_assoc()) {

                                echo "<tr>
                                    <td>{$row['id']}</td>
                                    <td>{$row['full_name']}</td>
                                    <td>{$row['age']}</td>
                                    <td>{$row['gender']}</td>
                                    <td>{$row['contact_number']}</td>
                                    <td>{$row['address']}</td>
                                    <td> <div class='action-buttons'>
                                               <button title='View QR ID'
                                                        class='viewQR-btn'
                                                        onclick='showModal(this)'
                                                        data-fullname='{$row['full_name']}'
                                                        data-age='{$row['age']}'
                                                        data-gender='{$row['gender']}'
                                                        data-contact='{$row['contact_number']}'
                                                        data-address='{$row['address']}'
                                                        data-qr='{$row['qr_code']}'>
                                                    <i class='fa-solid fa-qrcode'></i>
                                                </button>

                                                <button title='Delete QR ID' class='delete-btn' onclick='confirmDelete(this)' data-id='{$row['id']}'><i class='fa-solid fa-trash'></i></button>
                                            </div>
                                            </td>
                                   
                                </tr>";
                            }
                        } else {
                            echo "<tr><td colspan='7'>No validated residents found.</td></tr>";
                        }

                        $conn->close();
                        ?>
                    </tbody>
                </table>
            </div>
            <!-- Modal to display the QR code and details -->
            <div id="qrModal" class="modal" onclick="closeModal(event)">
                <div class="modal-container" onclick="event.stopPropagation()">
                    <div class="modal-title">
                        <img src="../PIC/logo.png" alt="logo">
                        <h4>ETRANSACTMO QR ID</h4>
                    </div>
                    <div class="modal-content">
                        <div class="details">
                            <p><strong>Full Name:</strong> <span id="modalFullName"></span></p>
                            <p><strong>Age:</strong> <span id="modalAge"></span></p>
                            <p><strong>Gender:</strong> <span id="modalGender"></span></p>
                            <p><strong>Contact Number:</strong> <span id="modalContact"></span></p>
                            <p><strong>Address:</strong> <span id="modalAddress"></span></p>
                        </div>
                        <div class="qr-code">
                            <img id="qrImg" src="" alt="QR Code">
                        </div>
                    </div>
                </div>
                <div class="modal-buttons">
                    <button onclick="window.print()" class="btn">Print QR ID</button>
                    <button onclick="downloadQRID()" class="btn">Download QR ID</button>
                </div>
            </div>
        </div>


    </main>
</body>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const districts = {
            "DISTRICT 1": [
                "PUROK AVOCADO",
                "PUROK DURIAN",
                "PUROK GRANADA",
                "PUROK LABANA",
                "PUROK LANSONES",
                "PUROK MARANG",
                "PUROK NANGKA",
                "PUROK PAKWAN",
                "PUROK PINYA",
                "PUROK RAMBUTAN",
                "PUROK SAGING",
                "PUROK SANTOL",
                "PUROK TAMARAW",
                "PUROK TAMBIS",
                "PUROK CHICO",
                "PUROK UBAS"
            ],
            "DISTRICT 2": [
                "PUROK ACACIA",
                "PUROK ALMASIGA",
                "PUROK APITONG",
                "PUROK BALITE",
                "PUROK GEMELINA",
                "PUROK KAMAGONG",
                "PUROK LAWAAN",
                "PUROK MAHOGANY",
                "PUROK MOLAVE",
                "PUROK NARRA",
                "PUROK NEEM TREE",
                "PUROK PINE TREE",
                "PUROK TALISAY",
                "PUROK TINDALO",
                "PUROK TUGAS",
                "PUROK YAKAL",
                "PUROK INDIAN TREE"
            ],
            "DISTRICT 3": [
                "PUROK AGUILA",
                "PUROK GORION",
                "PUROK MAYA",
                "PUROK WOODPECKER",
                "PUROK KALAPATI",
                "PUROK LOVEBIRDS",
                "PUROK OSTRICH",
                "PUROK KALAW",
                "PUROK KINGFISHER",
                "PUROK TAMSI",
                "PUROK PARROT"
            ],
            "DISTRICT 4": [
                "PUROK AROWANA",
                "PUROK BALO",
                "PUROK BANGUS",
                "PUROK BARILES",
                "PUROK BOLINAO",
                "PUROK FLOWERHORN",
                "PUROK LAPU-LAPU",
                "PUROK MAYA-MAYA",
                "PUROK TALAKITOK",
                "PUROK TANGIGUE"
            ],
            "DISTRICT 5": [
                "PUROK AMPALAYA",
                "PUROK CABBAGE",
                "PUROK CADIOS",
                "PUROK CARROTS",
                "PUROK CAMANSI",
                "PUROK EGGPLANT",
                "PUROK MALUNGGAY",
                "PUROK PECHAY",
                "PUROK STRINGBEANS"
            ],
            "DISTRICT 6": [
                "PUROK CAMEL A",
                "PUROK CAMEL B",
                "PUROK COBRA",
                "PUROK DRAGON",
                "PUROK EGGPLANT A",
                "PUROK EGGPLANT B",
                "PUROK KANGAROO",
                "PUROK SKYLARK",
                "PUROK PANTHER",
                "PUROK JAGUAR",
                "PUROK TAMARAW",
                "PUROK CARABAO"
            ],
            "DISTRICT 7": [
                "PUROK CATTLEYA",
                "PUROK DAISY",
                "PUROK EVERLASTING",
                "PUROK GUMAMELA",
                "PUROK ILANG-ILANG",
                "PUROK ORCHIDS",
                "PUROK SAKURA",
                "PUROK SAMPAGUITA",
                "PUROK SAN FRANCISCO",
                "PUROK SANTAN",
                "PUROK WALING-WALING"
            ]
        };

        const districtDropdown = document.getElementById("district-dropdown");
        const purokDropdown = document.getElementById("purok-dropdown");
        const usersTableBody = document.querySelector("#users-table tbody");

        // Populate district dropdown
        Object.keys(districts).forEach((district) => {
            const option = document.createElement("option");
            option.value = district;
            option.textContent = district;
            districtDropdown.appendChild(option);
        });

        // Populate purok dropdown based on selected district
        districtDropdown.addEventListener("change", () => {
            const selectedDistrict = districtDropdown.value;
            purokDropdown.innerHTML = '<option value="">-- Select Purok --</option>';

            if (selectedDistrict) {
                districts[selectedDistrict].forEach((purok) => {
                    const option = document.createElement("option");
                    option.value = purok;
                    option.textContent = purok;
                    purokDropdown.appendChild(option);
                });
                purokDropdown.disabled = false;

                // Filter residents by district
                filterResidentsByAddress(selectedDistrict, '');
            } else {
                purokDropdown.disabled = true;
                // Show all residents
                showAllRows();
            }
        });

        // Filter residents when purok changes
        purokDropdown.addEventListener("change", () => {
            const selectedDistrict = districtDropdown.value;
            const selectedPurok = purokDropdown.value;

            if (selectedDistrict) {
                filterResidentsByAddress(selectedDistrict, selectedPurok);
            }
        });

        // Function to filter residents by address
        function filterResidentsByAddress(district, purok) {
            console.log("Filtering by district:", district, "and purok:", purok);

            const rows = document.querySelectorAll('#users-table tbody tr');
            let visibleRows = 0;

            rows.forEach(row => {
                // Skip the "no data" row if it exists
                if (row.cells.length === 1 && row.cells[0].colSpan === 7) {
                    row.style.display = 'none';
                    return;
                }

                const addressCell = row.cells[5]; // Address is in the 6th column (index 5)
                if (!addressCell) return;

                const address = addressCell.textContent || '';
                console.log("Row address:", address);

                // Check if address contains district
                const hasDistrict = address.toUpperCase().includes(district);

                // Check if address contains purok (if purok is specified)
                const hasPurok = !purok || address.toUpperCase().includes(purok);

                console.log("Has district:", hasDistrict, "Has purok:", hasPurok);

                // Show row if it matches both filters
                if (hasDistrict && hasPurok) {
                    row.style.display = '';
                    visibleRows++;
                } else {
                    row.style.display = 'none';
                }
            });

            console.log("Visible rows:", visibleRows);

            // If no rows are visible, show "No residents found" message
            if (visibleRows === 0) {
                const noDataRow = document.querySelector('#users-table tbody tr.no-data');
                if (!noDataRow) {
                    const tbody = document.querySelector('#users-table tbody');
                    const newRow = document.createElement('tr');
                    newRow.className = 'no-data';
                    newRow.innerHTML = '<td colspan="7" style="text-align: center;">No residents found for the selected filters.</td>';
                    tbody.appendChild(newRow);
                }
            } else {
                // Remove "No residents found" message if it exists
                const noDataRow = document.querySelector('#users-table tbody tr.no-data');
                if (noDataRow) {
                    noDataRow.remove();
                }
            }
        }

        // Function to show all rows
        function showAllRows() {
            const rows = document.querySelectorAll('#users-table tbody tr');

            rows.forEach(row => {
                // Skip the "no data" row if it exists
                if (row.className === 'no-data') {
                    row.remove();
                    return;
                }

                row.style.display = '';
            });
        }
    });
</script>
<script>
    // Function to load approved transactions only
    function loadTransactions() {
        const tableBody = document.querySelector('#approved-transactions-table tbody');
        tableBody.innerHTML = '<tr><td colspan="9" style="text-align: center;">Loading approved transactions...</td></tr>';

        fetch('fetch_approved_requests.php')
            .then(response => response.json())
            .then(data => {
                tableBody.innerHTML = '';

                if (!data || data.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="9" style="text-align: center;">No approved transactions found.</td></tr>';
                    return;
                }

                data.forEach(transaction => {
                    const row = document.createElement('tr');

                    row.innerHTML = `
          <td>${transaction.request_id}</td>
          <td>${transaction.name}</td>
          <td>${transaction.transaction_name}</td>
          <td>${transaction.transaction_type}</td>
          <td>${transaction.transaction_details}</td>
          <td>${transaction.time_requested}</td>
          <td>${transaction.date_requested}</td>
          <td><span class="status-badge status-approved">${transaction.status}</span></td>
          <td>
            <button class="print-btn" onclick="printTransaction(${transaction.request_id})">🖨 Print</button>
          </td>
        `;

                    tableBody.appendChild(row);
                });
            })
            .catch(error => {
                console.error('Error fetching approved transactions:', error);
                tableBody.innerHTML = '<tr><td colspan="9" style="text-align: center;">Error loading approved transactions</td></tr>';
            });
    }

    function printTransaction(id) {
        // First, update the status to "Finished"
        fetch("update-request-status.php", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    request_id: id,
                    status: "Finished",
                }),
            })
            .then((res) => res.json())
            .then((data) => {
                if (data.success) {
                    // // Then open the print page in a new tab
                    window.open("print_request.php?id=" + id, "_blank");
                } else {
                    alert("Failed to update status.");
                }
            })
            .catch((err) => {
                console.error("Error:", err);
                alert("Something went wrong.");
            });
    }


    // Function to update transaction status with SweetAlert2 confirmation
    function updateTransactionStatus(requestId, status) {
        Swal.fire({
            title: 'Are you sure?',
            text: `Do you want to change the status to ${status}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, change it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('update_transaction_status.php', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `requestId=${requestId}&status=${status}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(
                                'Updated!',
                                'Transaction status has been updated.',
                                'success'
                            ).then(() => {
                                loadTransactions(); // Refresh the table
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to update status: ' + data.message,
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error updating status:', error);
                        Swal.fire(
                            'Error!',
                            'An error occurred while updating the status.',
                            'error'
                        );
                    });
            }
        });
    }

    // Add event listener to load transactions when the menu is clicked
    document.addEventListener('DOMContentLoaded', function() {
        const transactionsMenu = document.getElementById('transactions-menu');
        if (transactionsMenu) {
            transactionsMenu.addEventListener('click', loadTransactions);
        }
    });
</script>
<script>
    // Separate script to handle transaction status chart
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Loading transaction status chart...');

        // Fetch transaction status data
        fetch('fetch_transaction_status_data.php')
            .then(response => response.json())
            .then(data => {
                console.log('Transaction status data:', data);

                // Get the canvas element
                const ctx = document.getElementById('statusChart').getContext('2d');

                // Prepare the data
                const chartData = {
                    labels: [
                        `Pending (${data.pending_percent}%)`,
                        `Approved (${data.approved_percent}%)`,
                        `Rejected (${data.rejected_percent}%)`
                    ],
                    datasets: [{
                        data: [data.pending, data.approved, data.rejected],
                        backgroundColor: ['#f6c23e', '#1cc88a', '#e74a3b'],
                        borderColor: ['#dda20a', '#13a673', '#be2617'],
                        borderWidth: 2
                    }]
                };

                // Create the chart
                const statusChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '65%',
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    pointStyle: 'circle'
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        return `${value} transactions`;
                                    }
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching transaction status data:', error);
            });
    });
</script>

</html>